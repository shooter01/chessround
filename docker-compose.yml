version: '3.8'

services:
  frontend:
    container_name: react-frontend-round
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - VITE_KEYCLOAK_URL=http://keycloak:8080
      - VITE_KEYCLOAK_REALM=myrealm
      - VITE_KEYCLOAK_CLIENT_ID=myclient
      - VITE_PRESENCE_WS_URL=ws://localhost:8088  # <--- добавить

    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    networks:
      - keycloak-network

  backend:
    container_name: node-backend-round
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    environment:
      - NODE_ENV=development
      # Подключение к Postgres — обращаемся к сервису по имени `db`
      - DATABASE_URL=postgres://keycloak:password@db:5432/keycloak
      # Переменные для Lichess OAuth
      - LICHESS_CLIENT_ID=lip_vJMHMJyxiPN4Zc1SkL1Y
      - LICHESS_REDIRECT_URI=http://localhost:5000/lichess-auth/callback
      - LICHESS_REDIRECT_BASE_URL=http://localhost:5000
      - STATE_SECRET=your-very-strong-secret
      # URL фронтенда для редиректа после успешного логина (опционально)
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - db
    command: ["npx", "nodemon", "--legacy-watch", "index.js"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - keycloak-network
  redis:
    container_name: redis-presence
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks: [keycloak-network]

  duel_server:
    container_name: duel-server-round
    build:
      context: ./duel_server
      dockerfile: Dockerfile
      target: dev            # hot reload как у backend
    ports:
      - "8088:8080"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
      - DATABASE_URL=postgres://keycloak:password@db:5432/keycloak
      - BACKEND_BASE_URL=http://backend:5000      # <-- ВАЖНО

    volumes:
      - ./duel_server:/app
      - /app/node_modules
    depends_on:
      - redis
      - backend                                   # <-- дождаться бэка

    command: ["npm","run","dev:docker"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/healthz"]
      interval: 15s
      timeout: 3s
      retries: 3
    networks:
      - keycloak-network

  # keycloak:
  #   container_name: keycloak-round
  #   image: quay.io/keycloak/keycloak:23.0.6
  #   command: start
  #   environment:
  #     - KC_HOSTNAME=localhost
  #     - KC_HOSTNAME_PORT=8080
  #     - KC_HOSTNAME_STRICT_BACKCHANNEL=false
  #     - KC_HOSTNAME_STRICT=false
  #     - KC_HTTP_ENABLED=true
  #     - KC_HOSTNAME_STRICT_HTTPS=false
  #     - KC_HEALTH_ENABLED=true
  #     - KEYCLOAK_ADMIN=admin
  #     - KEYCLOAK_ADMIN_PASSWORD=admin
  #     - KC_DB=postgres
  #     - KC_DB_URL=jdbc:postgresql://db:5432/keycloak
  #     - KC_DB_USERNAME=keycloak
  #     - KC_DB_PASSWORD=password
  #   depends_on:
  #     - db
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - keycloak-network


  db:
    container_name: postgres-db-round
    image: postgres:16.2
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
    ports:
      - '5438:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init/chesscup_init.sql:/docker-entrypoint-initdb.d/01-chesscup_init.sql:ro
    networks:
      - keycloak-network

volumes:
  node_modules:
    driver: local
  postgres-data:
    driver: local

networks:
  keycloak-network:
    driver: bridge

